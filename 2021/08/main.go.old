package main

import (
	"fmt"
	"sort"
	"strings"
)

type SortedSplit []string

func (s SortedSplit) Len() int           { return len(s) }
func (s SortedSplit) Less(i, j int) bool { return len(s[i]) < len(s[j]) }
func (s SortedSplit) Swap(i, j int)      { s[i], s[j] = s[j], s[i] }

func charString(x ...byte) string {
	template := ""
	for _ = range x {
		template += "%c"
	}

	return fmt.Sprintf(template, x)
}

func compare(have, want string) bool {
	amount := 0
	for _, v := range want {
		if strings.Index(have, string(v)) != -1 {
			amount++
		}
	}

	return amount == len(want)
}

func swap(str, str1, str2 string) string {
	str = strings.ReplaceAll(str, str1, "1")
	str = strings.ReplaceAll(str, str2, "2")
	str = strings.ReplaceAll(str, "1", str2)
	return strings.ReplaceAll(str, "2", str1)
}

func printDigit(have string, letters map[byte]byte) (ret string) {
	ret = "none"

	oldhave := have
	have = ""
	for k := range oldhave {
		v := oldhave[k]
		have += string(letters[v])
	}

	if len(have) == 2 && compare(have, "cf") {
		ret = "1"
	} else if len(have) == 3 && compare(have, "acf") {
		ret = "7"
	} else if len(have) == 4 && compare(have, "bcdf") {
		ret = "4"
	} else if len(have) == 8 && compare(have, "abcdefg") {
		ret = "8"
	} else if len(have) == 5 {
		if compare(have, "acdeg") {
			ret = "2"
		} else if compare(have, "acdfg") {
			ret = "3"
		} else if compare(have, "abdfg") {
			ret = "5"
		}
	} else if len(have) == 6 {
		if compare(have, "abcefg") {
			ret = "0"
		} else if compare(have, "abdefg") {
			ret = "6"
		} else if compare(have, "abcdgf") {
			ret = "9"
		}
	}

	return
}

func safe_index(index, length int) (start, end int) {
	if index == -1 {
		start, end = 0, length
	} else if index == length {
		start, end = 0, length-1
	} else if index == 0 {
		start, end = 1, length
	} else {
		start, end = -1, -1
	}

	return
}

func diff(str1, str2 string) string {
	for _, v := range str2 {
		index := strings.Index(str1, string(v))
		start, end := safe_index(index, len(str1))
		if start == -1 {
			str1 = str1[0:index] + str1[index+1:]
		} else {
			str1 = str1[start:end]
		}
	}

	return str1
}

func process(input string) map[byte]byte {
	split := SortedSplit(strings.Split(input, " "))
	sort.Sort(split)

	one, seven, four, eight := split[0], split[1], split[2], split[6]
	split = split[3:9]

	a, b, c, d, e, f, g := "n", "n", "n", "n", "n", "n", "n"
	a = diff(seven, one)
	b = "n"
	c = "n"
	d = "n"
	f = "n"

	compare := diff(four, seven) + seven
	for _, v := range split {
		if len(v) == 5 {
			// collect e, g
			str := diff(v, compare)
			if len(str) == 1 {
				g = str
				if len(e) > 0 {
					e = diff(e, g)
				}
			} else {
				if len(g) > 0 {
					e = diff(str, g)
				} else {
					e = str
				}
			}
		} else if len(v) == 6 {
			// collect d,b
			if len(compare) != 6 {
				compare = seven + e + g + " "
			}
			str := diff(v, compare)
			if len(str) == 1 {
				b = str
				if len(d) > 1 {
					d = diff(d, b)
				}
			} else {
				if len(str) > 1 {
					if b != "n" {
						d = diff(str, b)
					} else {
						d = str
					}
				}
			}
		}
	}

	_ = eight
	for _, v := range split[3:] {
		str := diff(four, v)
		if len(str) == 1 && str != d {
			c = str
			f = diff(one, c)
			break
		}
	}

	return map[byte]byte{
		'a': a[0],
		'b': b[0],
		'c': c[0],
		'd': d[0],
		'e': e[0],
		'f': f[0],
		'g': g[0],
	}
}

func main() {
	//def := "abcefg cf acdeg acdfg bcdf abdfg abdefg acf abcdefg abcdfg"
	input := "acedgfb cdfbe gcdfa fbcad dab cefabd cdfgeb eafb cagedb ab"
	output := process(input)
	for i := 0; i < 7; i++ {
		letter := byte(i + 97)
		fmt.Printf("%c: %c\n", letter, output[letter])
	}
	for _, v := range strings.Split("cdfeb fcadb cdfeb cdbaf", " ") {
		fmt.Println(printDigit(v, output))
	}
}
